[{"content":"下载地址：https://nodejs.org/en/\n  到nodejs目录下创建两个空文件夹，node_cahe和node_global  然后通过命令添加配置\nnpm config set prefix \u0026quot;E:/nodejs-16.3.1/node_global\u0026quot;\rnpm config set cache \u0026quot;E:/nodejs-16.3.1/node_cache\u0026quot;\r  接下来配置系统环境变量，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”\n进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:/Develop/nodejs/node_global/node_modules】，将【用户变量】下的【Path】修改为【D:/Develop/nodejs/node_global】\n  测试\nnpm version\r  ","description":"NodeJs环境变量的配置","id":0,"section":"posts","tags":["VUE","nodeJs"],"title":"NodeJs环境变量的配置","uri":"http://www.wty.center/zh/posts/nodejs%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"},{"content":"本文主要介绍MybatisPlus中的组件Dynamic实现动态数据源切换；\n  Pom配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dynamic-datasource-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--Mysql驱动 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--Druid连接池 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.8\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--Mybatis Plus --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-plus-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.junit.vintage\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-vintage-engine\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt;     Yaml文件配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  server:port:8080spring:application:name:demo_oneautoconfigure:#自动化配置 例外处理exclude:com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfiguredatasource:type:com.alibaba.druid.pool.DruidDataSourcedynamic:primary:mysql#默认数据源datasource:mysql1:url:jdbc:mysql://mysqlIP:3306/test?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp;autoReconnect=true\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8username:rootpassword:123456driver-class-name:com.mysql.cj.jdbc.Drivermysql2:url:jdbc:mysql://mysqlIP:3306/test?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp;autoReconnect=true\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8username:rootpassword:123456driver-class-name:com.mysql.cj.jdbc.Driver#\t如果是oracel 也是一样的# oracle:# url: jdbc:oracle:thin:@127.0.0.1:1521:xe# username: system# password: 123123# driver-class-name: oracle.jdbc.OracleDriverdruid:max-active:50max-wait:10000min-idle:3initial-size:5mybatis-plus:# mapper-locations:复杂的操作可能需要自己写SQL，SQL可以写到xml文件中，这里指定和Dao对应的xml文件，此时我们需要在resources中创建一个mapper目录mapper-locations:mapper/*.xml# type-aliases-package:指定JavaBean的别名包，和MyBatis用法一样type-aliases-package:com.*.entityconfiguration:# map-underscore-to-camel-case:开启驼峰功能，数据库表列名如果有_，可以自动按驼峰命名规则转换map-underscore-to-camel-case:true# log-impl:日志开启，方便测试log-impl:org.apache.ibatis.logging.stdout.StdOutImpl    动态数据切换\n  直接使用注解指定数据源，具体使用例子如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13  package com.wty.demo_one.mapper; import com.baomidou.dynamic.datasource.annotation.DS; import com.baomidou.mybatisplus.core.mapper.BaseMapper; import com.wty.demo_one.entity.User; import org.apache.ibatis.annotations.Mapper; @Mapper @DS(\u0026#34;mysql2\u0026#34;)//可以使用在类上 public interface UserMapper extends BaseMapper\u0026lt;User\u0026gt; { @DS(\u0026#34;mysql1\u0026#34;)//也可以使用在方法上  User selectOne(Long userId); }       ","description":"SpringBoot+MyBatisPlus 实现多数据源动态切换","id":1,"section":"posts","tags":["springBoot","MyBatisPlus"],"title":"SpringBoot+MyBatisPlus 实现多数据源动态切换","uri":"http://www.wty.center/zh/posts/springboot+mybatisplus-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/"},{"content":"  拉取git项目 git地址为\n1  https://github.com/PanJiaChen/vue-element-admin.git     安装依赖 1  npm install   等待结束就完事了！！\n  目录结构   配置信息 vue.config.js 这里面配置了项目的基本信息： 所使用的环境、端口号、对外路径、输入文件路径等信息 , 可以看到我们使用的dev开发环境，下面将查看开发环境的配置\n.env.development 在这里会标注我们后台的路径， 此时因为使用的是mock数据， 所有只是提供了一下路径而已。以及标注当前文件的类型\nENV = ‘development’ 此时便引入了与后端数据交互， 与后端的交互接口都在 api的文件家里面。\n  文件分析 API文件夹 使用user.js举例 , 可以看到这个文件会向后端发送http请求， 但是它使用的是 /utils/request 里面的内容\n先说明此文件的作用， 在这个开源框架中与后端交互使用的是 axios 组件。指定请求的路径、类型、请求参数、请求体参数， 就可以执行异步亲求了。下一步介绍 /utils/request。\n/utils/request 首先创建一个axios的实例， 对于这个实例需要设定的有： 基本的URL、以及请求超时的。\n第二步是添加拦截器， axios每次请求都会经过这个拦截器。 store.getters.token 首先从全局状态管理那里判断 token , 有的话就可以请求， 否则就抛出异常。并且可以清楚的看到如果有 token的话， 我们在请求的时候会得到当前的token 并且直接添加到请求头中， 以便后端得到当前登录的信息。\n下面是对返回结果的拦截， 在这里会判断返回结果中的状态码， 根据状态码来判断这次请求的状态如何。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  // response interceptor service.interceptors.response.use( /** * If you want to get http information such as headers or status * Please return response =\u0026gt; response */ /** * Determine the request status by custom code * Here is just an example * You can also judge the status by HTTP Status Code */ response =\u0026gt; { const res = response.data // if the custom code is not 20000, it is judged as an error.  if (res.code !== 20000) { Message({ message: res.message || \u0026#39;Error\u0026#39;, type: \u0026#39;error\u0026#39;, duration: 5 * 1000 }) // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;  if (res.code === 50008 || res.code === 50012 || res.code === 50014) { // to re-login  MessageBox.confirm(\u0026#39;You have been logged out, you can cancel to stay on this page, or log in again\u0026#39;, \u0026#39;Confirm logout\u0026#39;, { confirmButtonText: \u0026#39;Re-Login\u0026#39;, cancelButtonText: \u0026#39;Cancel\u0026#39;, type: \u0026#39;warning\u0026#39; }).then(() =\u0026gt; { store.dispatch(\u0026#39;user/resetToken\u0026#39;).then(() =\u0026gt; { location.reload() }) }) } return Promise.reject(new Error(res.message || \u0026#39;Error\u0026#39;)) } else { return res } }, error =\u0026gt; { console.log(\u0026#39;err\u0026#39; + error) // for debug  Message({ message: error.message, type: \u0026#39;error\u0026#39;, duration: 5 * 1000 }) return Promise.reject(error) } )   最后将 axios的实例导出 export default service， 在这里我们看到了 store.getters.token 以及文件最上面的导入\n1 2  import store from \u0026#39;@ /store\u0026#39; store.getters.token // 下一步查看 /store 这个文件夹   /store 简单介绍此文件中几个重要的知识点\nState提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储\nMutation用于修改变更$store中的数据\n在mutations中不能编写异步的代码，会导致vue调试器的显示出错。在vuex中我们可以使用Action来执行异步操作。\nGetter用于对Store中的数据进行加工处理形成新的数据\n它只会包装Store中保存的数据，并不会修改Store中保存的数据，当Store中的数据发生变化时，Getter生成的内容也会随之变化\n1  token: state =\u0026gt; state.user.token,   在 gettes 文件中我们看到了 token 这个标识， 其中 gettes 文件就是为了我们方便从全局状态管理中获取数据的工具， 在这里可以得到当前的 token 。\n此文件主要是使用了 vuex , 而 vuex 是 vue中的全局的状态管理， 方便我们进行组件之间的数据传递。基本使用如下\n1 2 3 4 5 6 7  this.$store.state.count // 得到store中值  // 调用Acton中的异步方法 user.js 中的login 方法 ， 这个是 /veew/login 文件中的代码 this.$store.dispatch(\u0026#39;user/login\u0026#39;, this.loginForm).then(() =\u0026gt; { this.$router.push({path: this.redirect || \u0026#39;/\u0026#39;}) this.loading = false })   token 相关的 1 2 3 4 5 6  RESET_STATE: (state) =\u0026gt; { Object.assign(state, getDefaultState()) }, SET_TOKEN: (state, token) =\u0026gt; { state.token = token },   登录相关的 举例说明 login 方法， 首先 传入 {commit} 以及在方法中 commit(‘SET_TOKEN’, data.token) 这两个的作用是执行 action 中异步方法的简写， 组用就是设置 token 的值， 我们知道修改 store中的数据需要使用 Mutation 就是会调用上面的 SET_TOKEN 把 后端返回的token 保存到vuex中， 并且使用 setToken(data.token) 方法把 token写入到 cookie中 以便我们每次请求都可以带上这个 cookie , 并且能够解析出当前登录的用户 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // user login  login({commit}, userInfo) { console.log(\u0026#39;login\u0026#39;) const {username, password} = userInfo console.log(\u0026#34;user info -\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026#34; + username + \u0026#34;=\u0026gt;\u0026gt;\u0026gt;\u0026#34; + password) return new Promise((resolve, reject) =\u0026gt; { login({username: username.trim(), password: password}).then(response =\u0026gt; { const {data} = response commit(\u0026#39;SET_TOKEN\u0026#39;, data.token) console.log(data.token) setToken(data.token) resolve() }).catch(error =\u0026gt; { reject(error) }) }) },   在这个文件中我们还可以观察到最上面存在组件的导入， 这就和之前的说明相匹配。\n1 2 3 4  import {login, logout, getInfo} from \u0026#39;@/api/user\u0026#39; import {getToken, setToken, removeToken} from \u0026#39;@/utils/auth\u0026#39; import {resetRouter} from \u0026#39;@/router\u0026#39;   main.js 这个是项目的入口文件， 在这个入口文件中， 我们看到当前是使用mock数据， 并且全局挂在 element - ui 以及在vue的实例中挂载了 路由、store (vuex) ， 那下一步开始讲解路由\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  if (process.env.NODE_ENV === \u0026#39;production\u0026#39;) { const { mockXHR } = require(\u0026#39;../mock\u0026#39;) mockXHR() } // set ElementUI lang to EN // Vue.use(ElementUI, { locale }) // 如果想要中文版 element-ui，按如下方式声明 Vue.use(ElementUI) Vue.config.productionTip = false new Vue({ el: \u0026#39;#app\u0026#39;, router, store, render: h =\u0026gt; h(App) })   / router 使用vue router的第一步是需要一个路由表、以及把路由表加载到路由实例中， 最后把路由实例导出。下面就是定义的路由表， 对于路由表 中包括\npath : 访问的路径\ncomponent ： 此路由对于的组件\nhidden ： 是否在界面显示此路由\nmeta ： 设置路由的属性， 图标之类的\nname : 路由名字\nchildren ： 该路由下的子路由， 效果就是二级菜单\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  export const constantRoutes = [ { path: \u0026#39;/login\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/views/login/index\u0026#39;), hidden: true, children: [ { path: \u0026#39;https://panjiachen.github.io/vue-element-admin-site/#/\u0026#39;, meta: {title: \u0026#39;External Link\u0026#39;, icon: \u0026#39;link\u0026#39;} } }, { path: \u0026#39;/404\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/views/404\u0026#39;), hidden: true },   下面就是新建路由实例， 以及添加路由表， 导出路由。 上面介绍到了组件， 下一步解释路由对应的组件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  const createRouter = () =\u0026gt; new Router({ // mode: \u0026#39;history\u0026#39;, // require service support  scrollBehavior: () =\u0026gt; ({y: 0}), routes: constantRoutes }) const router = createRouter() // Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465 export function resetRouter() { const newRouter = createRouter() router.matcher = newRouter.matcher // reset router } export default router   /view/login/login.vue 组件的概念比较广泛，可以暂时理解为一个界面， 下面是登录的界面， name: ‘Login’, 定义的组件名称。 当在路由表中配置了此路由的信息后，就可以在使用中根据对应的path 来访问此路由。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;login-container\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import {validUsername} from \u0026#39;@/utils/validate\u0026#39; export default { name: \u0026#39;Login\u0026#39;, data() { }, watch: { }, methods: { } } \u0026lt;/script\u0026gt; \u0026lt;style lang=\u0026#34;scss\u0026#34;\u0026gt; \u0026lt;/style\u0026gt;   permission.js 此文件是用来配合路由使用的， 对于vue router 而言它还附带了一些其他的信息， 比如路由守卫， 在路由守卫中我们可以在路由跳转之前来做一些事情的。\n对于此项目来讲；\n1、首先判断是否有token\n2、没有token ， 如果在白名单里面， 就直接放行， 否则就直接强制跳转登录。\n3、有token , 如果是 /login 就就直接到 根目录下\n4、不是 /login 就去 store 里面找 当前用户的信息， 然后在放行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  const whiteList = [\u0026#39;/login\u0026#39;] // no redirect whitelist  router.beforeEach(async(to, from, next) =\u0026gt; { // start progress bar  NProgress.start() // set page title  document.title = getPageTitle(to.meta.title) // determine whether the user has logged in  //console.log(getToken())  const hasToken = getToken() if (hasToken) { if (to.path === \u0026#39;/login\u0026#39;) { // if is logged in, redirect to the home page  next({ path: \u0026#39;/\u0026#39; }) NProgress.done() } else { const hasGetUserInfo = store.getters.name if (hasGetUserInfo) { next() } else { try { // get user info  await store.dispatch(\u0026#39;user/getInfo\u0026#39;) next() } catch (error) { // remove token and go to login page to re-login  await store.dispatch(\u0026#39;user/resetToken\u0026#39;) Message.error(error || \u0026#39;Has Error\u0026#39;) next(`/login?redirect=${to.path}`) NProgress.done() } } } } else { /* has no token*/ if (whiteList.indexOf(to.path) !== -1) { // in the free login whitelist, go directly  next() } else { // other pages that do not have permission to access are redirected to the login page.  next(`/login?redirect=${to.path}`) NProgress.done() } } })   参考博文：https://blog.csdn.net/qq_41291945/article/details/107748231\n  ","description":"VUE模板的使用","id":2,"section":"posts","tags":["VUE","vue-admin-template"],"title":"VUE模板的使用(一)","uri":"http://www.wty.center/zh/posts/vue%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80/"},{"content":"Docker容器信息 ##查看docker容器版本\rdocker version\r##查看docker容器信息\rdocker info\r##查看docker容器帮助\rdocker --help\r镜像操作 镜像查看 提示：对于镜像的操作可使用镜像名、镜像长ID和短ID。\n##列出本地images\rdocker images\r##含中间映像层\rdocker images -a\r##只显示镜像ID\rdocker images -q\r##含中间映像层\rdocker images -qa ##显示镜像摘要信息(DIGEST列)\rdocker images --digests\r##显示镜像完整信息\rdocker images --no-trunc\r##显示指定镜像的历史创建；参数：-H 镜像大小和日期，默认为true；--no-trunc 显示完整的提交记录；-q 仅列出提交记录ID\rdocker history -H redis\r镜像搜索 ##搜索仓库MySQL镜像\rdocker search mysql\r## --filter=stars=600：只显示 starts\u0026gt;=600 的镜像\rdocker search --filter=stars=600 mysql\r## --no-trunc 显示镜像完整 DESCRIPTION 描述\rdocker search --no-trunc mysql\r## --automated ：只列出 AUTOMATED=OK 的镜像\rdocker search --automated mysql\r镜像下载 ##下载Redis官方最新镜像，相当于：docker pull redis:latest\rdocker pull redis\r##下载仓库所有Redis镜像\rdocker pull -a redis\r##下载私人仓库镜像\rdocker pull bitnami/redis\r镜像删除 ##单个镜像删除，相当于：docker rmi redis:latest\rdocker rmi redis\r##强制删除(针对基于镜像有运行的容器进程)\rdocker rmi -f redis\r##多个镜像删除，不同镜像间以空格间隔\rdocker rmi -f redis tomcat nginx\r##删除本地全部镜像\rdocker rmi -f $(docker images -q)\r镜像构建\n##（1）编写dockerfile\rcd /docker/dockerfile\rvim mycentos\r##（2）构建docker镜像\rdocker build -f /docker/dockerfile/mycentos -t mycentos:1.1\r容器操作 提示：对于容器的操作可使用CONTAINER ID 或 NAMES。\n容器启动 ##新建并启动容器，参数：-i 以交互模式运行容器；-t 为容器重新分配一个伪输入终端；--name 为容器指定一个名称\rdocker run -i -t --name mycentos\r##后台启动容器，参数：-d 已守护方式启动容器\rdocker run -d mycentos\r注意：此时使用\u0026quot;docker ps -a\u0026quot;会发现容器已经退出。这是docker的机制：要使Docker容器后台运行，就必须有一个前台进程。解决方案：将你要运行的程序以前台进程的形式运行。\n##启动一个或多个已经被停止的容器\rdocker start redis\r##重启容器\rdocker restart redis\r容器进程 ##top支持 ps 命令参数，格式：docker top [OPTIONS] CONTAINER [ps OPTIONS]\r##列出redis容器中运行进程\rdocker top redis\r##查看所有运行容器的进程信息\rfor i in `docker ps |grep Up|awk '{print $1}'`;do echo / \u0026amp;\u0026amp;docker top $i; done\r容器日志 ##查看redis容器日志，默认参数\rdocker logs rabbitmq\r##查看redis容器日志，参数：-f 跟踪日志输出；-t 显示时间戳；--tail 仅列出最新N条容器日志；\rdocker logs -f -t --tail=20 redis\r##查看容器redis从2019年05月21日后的最新10条日志。\rdocker logs --since=\u0026quot;2019-05-21\u0026quot; --tail=10 redis\r容器的进入与退出 ##使用run方式在创建时进入\rdocker run -it centos /bin/bash\r##关闭容器并退出\rexit\r##仅退出容器，不关闭\r快捷键：Ctrl + P + Q\r##直接进入centos 容器启动命令的终端，不会启动新进程，多个attach连接共享容器屏幕，参数：--sig-proxy=false 确保CTRL-D或CTRL-C不会关闭容器\rdocker attach --sig-proxy=false centos ##在 centos 容器中打开新的交互模式终端，可以启动新进程，参数：-i 即使没有附加也保持STDIN 打开；-t 分配一个伪终端\rdocker exec -i -t centos /bin/bash\r##以交互模式在容器中执行命令，结果返回到当前终端屏幕\rdocker exec -i -t centos ls -l /tmp\r##以分离模式在容器中执行命令，程序后台运行，结果不会反馈到当前终端\rdocker exec -d centos touch cache.txt 查看容器 ##查看正在运行的容器\rdocker ps\r##查看正在运行的容器的ID\rdocker ps -q\r##查看正在运行+历史运行过的容器\rdocker ps -a\r##显示运行容器总文件大小\rdocker ps -s\r##显示最近创建容器\rdocker ps -l\r##显示最近创建的3个容器\rdocker ps -n 3\r##不截断输出\rdocker ps --no-trunc ##获取镜像redis的元信息\rdocker inspect redis\r##获取正在运行的容器redis的 IP\rdocker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' redis\r容器的停止与删除 ##停止一个运行中的容器\rdocker stop redis\r##杀掉一个运行中的容器\rdocker kill redis\r##删除一个已停止的容器\rdocker rm redis\r##删除一个运行中的容器\rdocker rm -f redis\r##删除多个容器\rdocker rm -f $(docker ps -a -q)\rdocker ps -a -q | xargs docker rm\r## -l 移除容器间的网络连接，连接名为 db\rdocker rm -l db ## -v 删除容器，并删除容器挂载的数据卷\rdocker rm -v redis\r生成镜像 ##基于当前redis容器创建一个新的镜像；参数：-a 提交的镜像作者；-c 使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停\rdocker commit -a=\u0026quot;DeepInThought\u0026quot; -m=\u0026quot;my redis\u0026quot; [redis容器ID] myredis:v1.1\r容器与主机之间的数据拷贝 ##将rabbitmq容器中的文件copy至本地路径\rdocker cp rabbitmq:/[container_path] [local_path]\r##将主机文件copy至rabbitmq容器\rdocker cp [local_path] rabbitmq:/[container_path]/\r##将主机文件copy至rabbitmq容器，目录重命名为[container_path]（注意与非重命名copy的区别）\rdocker cp [local_path] rabbitmq:/[container_path]\r","description":"Docker常用命令","id":3,"section":"posts","tags":["docker"],"title":"Docker常用命令","uri":"http://www.wty.center/zh/posts/docker_command/"},{"content":"sublime设置\u0026quot;update_check\u0026quot;: false,没有效果 Preferences-\u0026gt;Settings-User中设置\u0026quot;update_check\u0026quot;:false,（注意是英文符号，逗号结尾）\n可是没有什么效果，重启还是还是弹出来自动更新的提示，直到注册了软件之后：\nhelp－Enter License输入\n—– BEGIN LICENSE —– TwitterInc 200 User License EA7E-890007 1D77F72E 390CDD93 4DCBA022 FAF60790 61AA12C0 A37081C5 D0316412 4584D136 94D7F7D4 95BC8C1C 527DA828 560BB037 D1EDDD8C AE7B379F 50C9D69D B35179EF 2FE898C4 8E4277A8 555CE714 E1FB0E43 D5D52613 C3D12E98 BC49967F 7652EED2 9D2D2E61 67610860 6D338B72 5CF95C69 E36B85CC 84991F19 7575D828 470A92AB —— END LICENSE —— 如果提示已过期，上网重新找注册码！！\n","description":"sublime小技巧","id":4,"section":"posts","tags":["工具"],"title":"sublime设置取消更新无效","uri":"http://www.wty.center/zh/posts/sublime_setting/"},{"content":"前言 搭建梯子主要分为以下几个步骤：\n 租借vps; 安装ssh远程登陆客户端； 通过脚本安装Shadowsocks; 安装SSR客户端，科学上网;  租借vps 上图所展示的就是国外常用的vps服务商，以前用过vultr和hostinger，体验并不算特别好，端口经常被封，网速还不怎么快。我现在用的是国内腾讯云的香港服务器。vultr里面买一个最低配置的也是一个月5美刀，腾讯云的话一年三百多，算起来价格差不多。所以还是强烈推荐国内用户使用腾讯云的服务器把！！\n安装ssh远程登陆客户端 百度搜索finalShell\n傻瓜式下一步安装；\n连接到自己的服务器\n成功登录，出现[root@xxxx ~]#后，全部复制以下代码粘贴回车（一键安装脚本）\n通过脚本安装Shadowsockss 输入一下命令回车执行\n1  wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh   然后添加文件权限\n1  chmod +x shadowsocks.sh   接着执行脚本，设置ss的密码端口和加密方式。\n1  ./shadowsocks.sh 2\u0026gt;\u0026amp;1 | tee shadowsocks.log   然后按照要求输入密码、端口、加密方式\n按任意键开始…或按Ctrl+C取消\n输入完后，脚本执行自动安装，此时需要等待5-15几分钟安装完成。\n当出现上图信息时，说明SS已经搭建成功。\n如果需要修改配置信息输入以下命令\n1  vim /etc/shadowsocks.json   这个就是配置文件，按a进行输入，:wq 进行保存；\n保存成功后执行一下命令进行重启\n常用：\n启动\n1  ssserver -c /etc/shadowsocks.json -d start   停止\n1  ssserver -c /etc/shadowsocks.json -d stop   重启\n1  ssserver -c /etc/shadowsocks.json -d reload   安装SSR客户端，科学上网 客户端下载好直接双击就可以使用了，不需要安装；\nWindows 版本SSR客户端\nhttps://www.magento2u.com/wp-content/uploads/ShadowsocksR-4.7.0-win.zip\nmacOS 版本SSR客户端\nhttps://www.magento2u.com/wp-content/uploads/shadowsocksr-android-3.5.4.zip\nAndroid 版本SSR客户端\nhttps://www.magento2u.com/wp-content/uploads/ShadowsocksX-NG-R8.zip\n打开以后，在桌面右下角任务栏出现，点右键，点从粘贴板导入，然后就是见证奇迹的时刻，我们成功了。安卓端的ssr工具也很多，自行下载安装包安装就好，用法都差不多，ios下，国内市场的ssr客户端都下架了，需要去美区App Store下载，美区账号在淘宝买就好，一般一两块钱一个，ios端推荐Shadowrocket，不过要花钱买，几块钱，用我们之前注册的PayPal就好，也有个免费的Patatso Lite。用法都差不多，从剪贴板导入ssr地址就好。\n结语 相对于ssr我还是比较倾向于用ss来作为服务端，以前用ssr的时候经常段都被封，后面换了ss端口很少被封了。客户端使用ssr是因为体验感比ss强多了。。\n ","description":"科学上网傻瓜式教程","id":5,"section":"posts","tags":["科学上网","工具"],"title":"傻瓜式搭建科学上网梯子（VPN）","uri":"http://www.wty.center/zh/posts/ssr_vpn/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":6,"section":"gallery","tags":null,"title":"图片","uri":"http://www.wty.center/zh/gallery/photo/"},{"content":"写字楼里写字间，写字间里程序员；程序人员写程序，又拿程序换酒钱。\n酒醒只在网上坐，酒醉还来网下眠；酒醉酒醒日复日，网上网下年复年。\n……\n宁愿老死程序间，只要老板多发钱；小车大房不去想，撰个2 k好过年。\n若要见识新世面，公务员比程序员；一个在天一在地，而且还比我们闲。\n别人看我穿白领，我看别人穿名牌；天生我才写程序，臀大近视肩周炎。\n年复一年春光度,度得他人做老板;老板扣我薄酒钱,没有酒钱怎过年.\n春光逝去皱纹起,作起程序也委靡;来到水源把水灌,打死不做程序员.\n别人笑我忒疯癫，我笑他人命太贱；状元三百六十行，偏偏来做程序员！！\n但愿老死电脑间，不愿鞠躬老板前；奔驰宝马贵者趣，公交自行程序员。\n若将程员比妓女，一在平地一在天；若将程员比车马，他得驱驰我无闲。\n别人笑我忒疯癫，我笑自己命太贱；不见满街漂亮妹，哪个归得程序员。\n不想只挣打工钱，那个老板愿发钱；小车大房咱要想，任我享用多悠闲。\n比尔能搞个微软，我咋不能捞点钱；一个在天一在地，定有一日乾坤翻。\n我在天来他在地，纵横天下山水间；傲视武林豪杰墓，一樽还垒风月山。\n电脑面前眼发直，眼镜下面泪茫茫；做梦发财好几亿，从此不用手指忙。\n哪知梦醒手空空，老板看到把我训；待到老时眼发花，走路不知哪是家。\n各位在此穷抱怨，可知小弟更可怜；俺学编程两年半，至今没赚一分钱。\n听说三十是末日，二十三岁在眼前；发誓立志傍微软，渺渺前程对谁言？\n小农村里小民房，小民房里小民工；小民工人写程序，又拿代码讨赏钱。\n钱空只在代码中，钱醉仍在代码间；有钱无钱日复日，码上码下年复年。\n但愿老死代码间，不愿鞠躬奥迪前，奥迪奔驰贵者趣，程序代码贫者缘。\n若将贫贱比贫者，一在平地一在天；若将贫贱比车马，他得驱驰我得闲。\n别人笑我忒疯癫，我笑他人看不穿；不见盖茨两手间，财权富贵世人鉴。\n","description":"Hugo, the world’s fastest framework for building websites","id":7,"section":"","tags":null,"title":"About","uri":"http://www.wty.center/zh/about/"}]